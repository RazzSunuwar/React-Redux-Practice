'Redux is a predictable state container for JavaScript apps'

It is for JavaScript apps
It is a state container
It is predictable

Redux is for JavaScript applications
Redux is not tied to React
Can be used with React, Angular, Vue or even vanilla JavaScript
Redux is a library for JavaScript applications

Redux is a state container
Redux store the state of your application
Consider a React app - state of a application
State of an app is the state represented by all the components of that app
Redux will store and manage the application state

Redux is predictable 
Predictable in what way?
Redux is a state container
The state of the application can change
Ex: todo app - item (pending) -> item (completed)
In redux, all state transitions are explicit and it is impossible to keep track of them
The change to your application's state become predictable

'Redux is a predicatable state container for JavaScript apps'
Manage the state of your application in a predictable way, redux can help you.


React-Redux is the official Redux UI binding library for React


Summary
React is a library used to build a user interfaces
Redux is a library for managing state in a predictable way in JavaScript applications
React-redux is a library that provides bindings to use React and Redux together
in an application



Three core concepts contd.

Cake shop scenrio       Redux       Purpose

shop                    store       Holds the state of your application

Intension to Buy-Cake   Action      Describes what happened

Shopkeeper              Reducer     Ties the store and actions together



A store that holds the state of your application.

An action that describes the changes in the state of the appliction.

A reducer which actually carries out the state transition depending on the action.




Three Principles 

First Principles
'These state of your whole application is stored is stored in an object tree within a single store'

Maintain our application state in a single object which would be managed by the Redux store


Cake Shop -
Let's assume we are tracking the number of cakes on the shelf
{
    numberOfCakes: 10
}


Second Principles
'The only way to change the state is to emit an action, an object describes what happened'
To update the state of your app, you need to let Redux know about that with an action
Not allowed to directly update the state object

Cake Shop
Let the shopkeeper know about our action -BUY_CAKE
{
    type: BUY_CAKE
}


Third Principles
'To specify how the state is transformed by actions, you write pure reducers'

Reducer - {prevState, action}=> newState

Cake Shop
Reducer is shopkeeper
const reducer = (state, action) => {
    switch (action.type){
        case BUY_CAKE: return {
            numberOfCakes: state.numberOfCakes - 1
        }
    }
}



Actions
The only way your application can interact with the store
Carry some information from your app to the redux store
Plain JavaScript objects
Have a 'type' property that indicates the type of action being performed
The 'type' property is typically defined string constants



Reducers
Specify how the app's state changes in response to actions sent to the store

Function that accepts state and action  as arguments, and returns the next state of the application
(previousState, action) => newState



Redux store
One store for the entire application
Responsibilities -
-> Holds application state
-> Allows access to state via getState()
-> Allows state to be updated via dispatch(action)
-> Registers listeners via suscribe(listener)
-> Handles unregistering of listeners via the function returned by suscribe(listener)